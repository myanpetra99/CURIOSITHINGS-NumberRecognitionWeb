# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RghApHc9D-TSrkHevui-BaiPBA8wPtDK
"""

import tensorflow as tf
import numpy as np

mnist = tf.keras.datasets.mnist.load_data()

(x_train, y_train), (x_test, y_test) = mnist

x_train, x_test = x_train/255.0 , x_test/255.0

layers = tf.keras.layers

model = tf.keras.models.Sequential([
                layers.Flatten(input_shape=(28,28)),
                layers.Dense(128,activation='relu'),
                layers.Dropout(rate=0.2),
                layers.Dense(10, activation='softmax')
])

model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])

r = model.fit(x_train,y_train, validation_data=(x_test,y_test), epochs=10)

import matplotlib.pyplot as plt
plt.plot(r.history['loss'], label='loss')
plt.plot(r.history['val_loss'], label='val loss')
plt.legend()

plt.plot(r.history['accuracy'], label='acc')
plt.plot(r.history['val_accuracy'], label='val acc')
plt.legend()

from sklearn.metrics import confusion_matrix
y_pred = model.predict(x_test).argmax(axis=1)
confusion_matrix(y_test, y_pred)

missclassified = np.where(y_pred != y_test)[0]
i = np.random.choice(missclassified)
plt.imshow(x_test[i], cmap='gray')
plt.title('True label : %s Predicted %s ' %  (y_test[i],y_pred[i]))

rightclassified = np.where(y_pred == y_test)[0]

i = np.random.choice(rightclassified)

plt.imshow(x_test[i], cmap='gray')
plt.title('True label : %s Predicted %s ' %  (y_test[i],y_pred[i]))

import tensorflowjs as tfjs

tfjs.converters.save_keras_model(model, "jsmodel")